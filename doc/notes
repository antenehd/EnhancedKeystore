
# UUID of the TA:

  - is version 5 based on 'TEE Internal Core API Specification â€“ Public Release v1.1.2' documents' 'Table: 3-1'. And out of the name spaces defined in RFC 4122 Appendix C
    'URL' namespace is selected simply it is enougn to uniquely identify the TA.
 
  -
    /*From RFC 4122,  Name space id for URL in name string format is */
    uuid_t NameSpace_URL = { /* 6ba7b811-9dad-11d1-80b4-00c04fd430c8 */
        0x6ba7b811,
        0x9dad,
        0x11d1,
        0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8
    }
 
  - name 'enhancedkeystore.ta.tee.cs.aalto.fi' is assigned by me.
  - MD5 hashing used. 
      
          md5(6ba7b8119dad11d180b400c04fd430c8+hexof(enhancedkeystore.ta.tee.cs.aalto.fi))
          hexof(enhancedkeystore.ta.tee.cs.aalto.fi) = 656e68616e6365646b657973746f72652e74612e7465652e63732e61616c746f2e6669
          md5(6ba7b8119dad11d180b400c04fd430c8656e68616e6365646b657973746f72652e74612e7465652e63732e61616c746f2e6669) = 316cd877ebae59d267666cce17e1d471

    website used for hashing is 'http://www.fileformat.info/tool/hash.htm'

  - follow section 4.3 of RFC 4122 to construct the UUID. the resulting UUID of the TA would be
     {
       time_low = 316cd877
       time_mid = ebae
       time_hi_and_version = 59d2
       clockSeqAndNode = a7666cce17e1d471
     }
    

# TA is Multi Instance Trusted Application. This means every time a client application opens a new session to the TA a new instance of the TA is created.
  This enables easy global variable managment since every session will have its own instance that means every time a session opens a sparate global variable is initialized.


# Parameter design for invoke command

   when command is :

         - INITIATE_DH_CMD( 0x00000001 ):


              (output)  params[0].memref.buffer = gx              where 'gx' is the public shared secrete key generated (g^x mod p). buffer size is 2048 bits
               
              (output)  params[1].memref.buffer = g               where g is the generator. buffer is 4 bytes

              (output)  params[2].memref.buffer = p               where p is the prime. buffer size is 2048 bits

              (input)   params[3].value.b = key_length            this is uint32_t value


         - RESPOND_DH_CMD ( 0x00000002 ) :

              (inout)  params[0].memref.buffer = gx(input) & gy(output)          where 'gx' is the public shared secrete key provided by remote end (g^x mod p) and 'gy' is the response public

                                                                                 shared key generated (g^y mod p). buffer size if 2048 bits
               
              (output)  params[1].memref.buffer = key_id	                 key id is 8 octets.

              (input)  params[2].memref.buffer = p                               where p is the prime. buffer size is 2048 bits


              (input)  params[3].value.a =  key_length                           key length in bits

              (input)  params[3].value.b =  g                                    where g is the generator
       

         - COMPLETE_DH_CMD ( 0x00000003 ) :

              (input)  params[0].memref.buffer = gy              where 'gy' is the public shared secrete key provided by remote end (g^y mod p)
								 size of buffer should be 256 Bytes.
								 
             (output)  params[1].memref.buffer = key_id_a        size of the buffer should be 8 octects


	
         - ENCRYPT_AES_CMD ( 0x00000004 ) :

              (input)  params[0].memref.buffer = data to be encrypted
               
              (output)  params[1].memref.buffer = buffer where encrypted data is stored. size of this buffer should be equal to the size
	                                          of the above buffer (params[0].memref.buffer)
	

              (output)  params[2].memref.buffer = Initial vector( initial counter value ). size of this buffer should be 16 bytes.

              (input)  params[3].memref.buffer =  key_id to be used for the encryption. size of this buffer should be 8 bytes.
	
	 - DECRYPT_AES_CMD ( 0x00000005 ) :

              (input)  params[0].memref.buffer = data to be decrypted

               
              (output)  params[1].memref.buffer = buffer where decrypted data is stored.size of this buffer should be equal to the size
	                                          of the above buffer (params[0].memref.buffer)
	
              (input)  params[2].memref.buffer = Initial vector( initial counter value ). size of this buffer should be 16 bytes.

              (input)  params[3].memref.buffer =  key_id to be used for the decryption. size of this buffer should be 8 bytes.

# sessionContext would be NULL. The TA design is such that there is one session per instance therefore there is no need to set sessionContext to identify the session with in the instance.

# Key length supported is AES 256. Generator (g) should always be 4 bytes(octets) long and the prime should always be 2048 bit long.

# Only AES CTR algorithm is supported for syymetric encryption and decryption.

# Syymetric key identifier is 8 bytes long.

# A new session should be opened before invoking the following commands:
	
	- INITIATE_DH_CMD
	- RESPOND_DH_CMD
	- ENCRYPT_AES_CMD
	- DECRYPT_AES_CMD

# Command COMPLETE_DH_CMD should be invoked with in the same session as the command INITIATE_DH_CMD


